* Necesitan un permalink al contenido para pasarle al cliente															
	- El permalink del comment queda igual al permalink del post al que pertenece.
	- CREAR EN PostFactory y CommentFactory metodos createUrl!!!!!!!!!!!!!!!!!!!!!									OK
	- Y AGREGARLOS A LA INTERFAZ Feed y A TODOS SUS DECORATORS!!													OK

* Crear la clase InitData que se pasa al constructor de Integrator junto con el tipo de app							
	- Implementar una clase que extienda de FBInitData y contenga la info necesaria para iniciar una FB App
		Estaria bueno que sea mas tipo una factory, que InitData te devuelva un ContenManager!!!!!!!!!
		Asi lo mismos, menor acople entre clases y mas facil de leer y llevar!!!!!!!!!!!!!!!!!!!!!!!!!

ESTAS DOS QUE SIGUEN LAS MATAMOS DE UNA SI HACEMOS QUE LOS FEED SEAN UNA JERARQUIA DE PADRES E HIJOS!!
Que feed tenga un isLeaf() y un getChilds(). Lo vemos a ver que nos van diciendo.
* Tienen que poder diferenciar el tipo de contenido, post o comment!
	- Le ponemos un getType al Objeto Feed. Tambien estoy pensando en hacerlo como una jerarquia padre hijo.
	- Por ahora no esta por que estuve cambiando los extends por decorators.
* De las relaciones entre contenidos solo necesitan el id del post para el comment!
	- Esto lo sacamos del post y si no se puede es la primer parte del id
	del comment, lo parseamos y ya.
	Esto nos caga es nuestro objeto Feed que estaria bueno que sea
	generico y no se como engancharlo de forma prolija.

* FBContentManaget.getFeeds solo trae posts y comments.
	- Hacer que no busque comments de posts que ya se sabe que no tienen.											OK
	- Guardar el post id y numero de comentarios que tenia el post para saber										OK
	en la proxima si tiene nuevos comments o solo likes
	
* PostDao ahora usa como limite 300 posts (con mas se tilda Facebook)
	- En caso de alcanzar ese limite (menos un umbral, por que siempre pido 300 y llegan 295) 						
	hay que volver a pedir mas comments cambiando la fecha pivote del request.										OK
	- Tambien hay que tener cuidado al mergear los proximos que se traes para asegurarnos que no se repitan.	
	
* Crear clase Feed:																									OK
	- Las clases Post y Comment ahora extienden de Feed																Changed
		Hice que Feed sea un decorator de Post y Comment, asi queda todo mas prolijo!
	- Agregar el tipo en PostFactory y CommentFactory					  											Changed
		El tipo lo hice con otro decorator para el tipo por ahora.
		Igual les voy a pasar las interfaces a ellos a ver que nos dicen.
	- La interface FBContentManager ahora manipula Feeds															OK
		La hice andar independientement de si el feed es post o comment.

* En post factory parsear 																							OK
	- videos 																										OK
	- fotos																											OK
	- links																											OK

* Copiar todo lo de Fan Pages para Groups (en FBMain cuando instanciamos FBInitData Cambiar los nombres y tipos)	OK
	Le pase parte del proceso de Page y Group a las factories para que quede mas parecido al resto.

* FBContentManager.remove solo elimina posts. Falta hacer que elimine comentarios									OK

* Ellos necesitan una interfaz que les permita traer todo lo nuevo a partir de una fecha (parï¿½metro de ellos) 
	- Interfaz ContentManager con una implementacion FacebookContentManagerque le pidas todo lo nuevo.				OK					

* Necesitan el usuario que creo el contenido! (solo el id)
	- Hay que agregarle al objeto Feed el UserId. 																	OK
	- Para hacerles esto mas completo le agregamos un UserDao por si quieren mas datos del user
		pero que no los busque siempre sino son muchas consultas.

* Necesitanb la fecha de creacion del contenido!
	- Agregarle al objeto feed un creationTime y updateTime															OK
